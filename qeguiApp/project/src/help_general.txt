Refer to QE_QEGuiAndUserInterfaceDesign.pdf for comprehensive documentation on the QEGui
application.

Options
Mandatory arguments to long options are mandatory for short options too.

-a, --adjust_scale
        Adjust the GUIs scaling. This option takes a single value which is the percentage
        scaling to be applies to each GUI window. The value may be either an integer or a
        floating point number. If specified its value will be constrained to the range 40
        to 400.

-f, --font_scale
        Additional font scaling above and beyond the general GUIs scaling specified by -a.
        This option takes a single value which is the percentage addtional font scaling.
        The value may be either an integer or a floating point number. If specified its
        value will be constrained to the range 40 to 400, although typically would be
        in the range 80 to 120.

-s, --single
        Single application.
        QEGui will attempt to pass all parameters to an existing instance of QEGui. When
        one instance of QEGui managing all QEGui windows, all windows will appear in the
        window menu. A typical use is when a QEGui window is started by a button in EDM.

-e, --edit
        Enable edit menu option.
        When the edit menu is enabled Designer can be launched from QEGui, typically to
        edit the current GUI. Note QEGui will only reload modified ui files if/when this
        option is used.

-b, --disable_menu
        Disable menu bar.

-u, --disable_status
        Disable status bar.

-o, --disable_autosave
        Disable configuration auto-save.

-r, --restore
        Restore from saved configuration.
        If a configuration name is not provided with this option the saved default
        configuration is used if available.
        Note, a single configuration file may contain multiple named configurations as well
        as a default configuration.

-c, --configuration
        Configuration file.
        Named configurations will be saved to and read from this file. If this option is
        not provided the default is QEGuiConfig.xml in the current working directory.

-p, --path
        Search paths
        When opening a file, this list of space seperated paths may be used when searching
        for the file. Paths may end with ... to search all sub directories of the path.
        Refer to 'File location rules' for the rules QEGui uses when searching for a file.

-m, --macros
        Macro substitutions applied to GUIs

        macros format: keyword=substitution, keyword=substitution,...
        Enclose in quotes if this parameter contains any spaces.

        Typically substitutions are used to specify specific variable names when loading
        generic template forms. Substitutions are not limited to template forms, and some
        QEWidgets use macro substitutions for purposes other than variable names.

-w, --customisation_file
        Window customisation file.
        This file contains named sets of window menu bar and tool bar customisations.
        Named customisations will be read from this file. If this option is not provided
        an attempt will be made to use QEGuiCustomisation.xml in the current working
        directory. A customisation file is optional.

-n, --customisation_name
        Startup window customisation name.
        The name of the window and menu bar customisation set to apply to windows created
        when the application starts (the .ui files specified on the command line). This
        name should be the name of one of the sets of window customisations read from the
        window customisation file.

-d, --default_customisation_name
        Default window customisation name.
        The name of the window and menubar customisation set to apply to all windows
        created when no customisation name has otherwise been provided. This name should
        be the name of one of the sets of window customisations read from the window
        customisation file. Typically, this is required when windows created through the
        Open file dialog, or windows created through a QE push button require a different
        set of customisations to the system defaults. Note the customisation set specified
        in the switch only applies to windows created at startup and specified on the
        command line.

-t, --title
        Application title.
        This title will be used instead of the default application title of 'QEGui'

-k, --known_pvs_list
        Provides the name of a file that defines a list of known PVs for the StripChart (and 
        others) PV name dialog. This supplements any PV names retrieved from the archivers.

-z, --out_of_service
        Provides the name of a file that defines the list of out of service PVs. This
        modifies the displayed "alarm" colour. 
 
-h, --help
        Display help text explaining these options and exit.

-v, --version
        Display version info and exit.


Parameters

filenames  GUI filenames to open. Each filename is a separate parameter.


Environment Variables

As well as the standard Channel Access (client) environment variables, the QE framework
and hence the QEGui program's run time behaviour may be modified by setting a number of
QE environment variables. These are:


QE_UI_PATH - this variable may be used as an alternative to, or in addition to, the -p option.
This list of space seperated paths used when searching for a ui file.


QE_DEFAULT_PROVIDER - this variable may be used to specify the default provider/protocol
use to connect to process variables when an explicit protocol is not specified as part of
the  PV name. This should be defined as one of "ca" or "pva".


QE_ARCHIVE_TYPE - Specifies the type of archiver in use. The allowed values are "CA" for
the traditional Channel Access Archiver, and "ARCHAPPL" for the Archive Appliance.
The latter only availble if Archive Appliance support was included when the QE framework
was built. If this environment variable is not specified then "CA" is the default.


QE_ARCHIVE_LIST - specifies a list of channel archive servers. The format of this
variable is a space separated set of one or more archive severs. Each Channel Access server
is specified as a hostname:port/endpoint triplet, e.g.:

   export QE_ARCHIVE_LIST="CR01ARC01:80/cgi-bin/ArchiveDataServer.cgi CR01ARC02:80/cgi-bin/ArchiveDataServer.cgi"

Each Archive Appliance server is defined by a hostname:port/endpoint(s)  e.g.:

   export QE_ARCHIVE_LIST="CR01ARC04:17665/mgmt/bpl/ MX3ARC01:17665/mgmt/bpl/ NANOARC01:17665/mgmt/bpl/"


A leading http:// is not required but is permitted.


QE_ARCHIVE_PATTERN - This variable specifies the pattern match applied when the framework
retrieves sets of channel names from the archiver. The pattern is a regular expression.
If undefined/empty then all names are retrived.


QE_RECORD_FIELD_LIST - This variable specifies a file that defines the set of field
names associated with each record type, as used by the PV Propeties widget. If specified,
the data will be merged with the internal resoure file built into the framework.
The format of the file is a simple ASCII file consisting of:

   # example                     -- comment lines - ignored
                                 -- blank lines - ignored
   <<recordtype>>                -- introduce record type, e.g. <<ai>>
   field_name                    -- field name, e.g. DESC
   field_name, "description"     -- field name and description, e.g. SCAN, "Scan Mechanism"

All field names are associated with the preceeding record type. Field names with a '$'
suffix are read as a long string if the host supports this.

The internal resource file defines fields for all the records from base-7.0.3, most of
the records from the synApps distribution, together with the AS developed concat record,
and two iTech libera record types, i.e. the following record types:

   aSub           aai            aao            acalcout       ai            
   ao             asyn           bi             bo             busy          
   calc           calcout        camac          compress       concat        
   dfanout        dxp            epid           event          fanout        
   filter         genSub         histogram      int64in        int64out      
   libera         liberaSignal   longin         longout        lsi           
   lso            luascript      mbbi           mbbiDirect     mbbo          
   mbboDirect     mca            motor          permissive     printf        
   pycalc         scalcout       scaler         scanparm       sel           
   seq            sscan          sseq           state          status        
   stringin       stringout      sub            subArray       swait         
   table          throttle       timestamp      transform      vme           
   waveform

The file specified by the QE_RECORD_FIELD_LIST variable can be used to define additional
record types and/or completely replace the specification of a specified record type. It
cannot be used to define extra fields for an existing record type.


QE_STRIPCHART_PREDEFINED_PVS - This environment variable defines upto 10 space separated
PV names that are available on the strip chart as pre defined PV names. Example:

   export QE_STRIPCHART_PREDEFINED_PVS="SR11BCM01:CURRENT_MONITOR  SR11BCM01:LIFETIME_MONITOR"


QE_GLOBAL_STYLE_SHEET - Defines a global style that is applied to the QApplication. This occurs
the first time a QEWidget is constructed, so applies qeally to both designer and qegui. The 
variable may be the style string itself or if it starts with "file://" then it is intrpretted as
a file reference which is read to get the global style. This examples shows how to make QGroupBox
widgets in Qt5/Qt6 look like a traditional group box:

   export QE_GLOBAL_STYLE_SHEET="QGroupBox { border-radius:2px; border-width:1px; border-style:groove; border-color:rgb(128,128,128); margin-top: 6px; } QGroupBox::title { left:8px; top:-6px; }"

or

   export QE_GLOBAL_STYLE_SHEET="file:///etc/qegui.conf"

